# -*- coding: utf-8 -*-
"""Síí_Modelo de regresión lineal -  modulo 3 proyect final

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fx_DivlBNwx1jyQ7uU7D9TlU0u6CUh4W

## **Librerias**
"""

# Importamos las librerías necesarias
import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

"""## **Drive**"""

from google.colab import drive
drive.mount('/content/drive')

"""## **Modelo de regresion lineal**"""

df = pd.read_csv('/content/drive/MyDrive/Ciencias de Datos /modulo 3/proyecto final/compartido proyect modulo 3/bases_unidas (1).csv', delimiter=',')
df

df.info()

print(df.isnull().sum())

# Convertir 'Date' en formato a Fecha
df['Date'] = pd.to_datetime(df['Date'])

# Extrar año, mes y dia de la coumna 'Date'
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month
df['Day'] = df['Date'].dt.day

df.head(1)

#eliminar columnas irelevantes
df =df.drop(['Date'], axis=1)
df =df.drop(['Customers'], axis=1)
df =df.drop(['StoreType'], axis=1)
df =df.drop(['PromoInterval'], axis=1)
df =df.drop(['Assortment'], axis=1)

# Reemplazar 'a', 'b', 'c' por 1 y '0' por 0
df['StateHoliday'] = df['StateHoliday'].replace({'a': 1, 'b': 1, 'c': 1, '0': 0})

# Rellenar los valores nulos con 0
df['CompetitionDistance'].fillna(0, inplace=True)
df['CompetitionOpenSinceMonth'].fillna(0, inplace=True)
df['CompetitionOpenSinceYear'].fillna(0, inplace=True)
df['Promo2SinceWeek'].fillna(0, inplace=True)
df['Promo2SinceYear'].fillna(0, inplace=True)
df['Promo2'].fillna(0, inplace=True)

#convertir a entero
df['CompetitionOpenSinceMonth'] = df['CompetitionOpenSinceMonth'].astype(int)
df['CompetitionOpenSinceYear'] =df['CompetitionOpenSinceYear'].astype(int)
df['Promo2SinceWeek'] = df['Promo2SinceWeek'].astype(int)
df['Promo2SinceYear'] = df['Promo2SinceYear'].astype(int)
df['Promo2'] =df['Promo2'].astype(int)
df['CompetitionDistance'] =df['CompetitionDistance'].astype(int)

print(df.isnull().sum())

df.info()

df.head(10)

df_ts = pd.read_csv('/content/drive/MyDrive/Ciencias de Datos /modulo 3/proyecto final/test_limpio.csv')
df_s = pd.read_csv('/content/drive/MyDrive/Ciencias de Datos /modulo 3/proyecto final/compartido proyect modulo 3/store_data_modified.csv')
df_ts

df_s.head(5)

df_u_t_s = pd.merge(df_ts, df_s, on='Store', how='left')
df_u_t_s.head()

# Convertir 'Date' en formato a Fecha
df_u_t_s['Date'] = pd.to_datetime(df_u_t_s['Date'])
# Extrar año, mes y dia de la coumna 'Date'
df_u_t_s['Year'] = df_u_t_s['Date'].dt.year
df_u_t_s['Month'] = df_u_t_s['Date'].dt.month
df_u_t_s['Day'] = df_u_t_s['Date'].dt.day

df_u_t_s.head(1)

# Rellenar los valores nulos con 0
df_u_t_s['CompetitionDistance'].fillna(0, inplace=True)
df_u_t_s['CompetitionOpenSinceMonth'].fillna(0, inplace=True)
df_u_t_s['CompetitionOpenSinceYear'].fillna(0, inplace=True)
df_u_t_s['Promo2SinceWeek'].fillna(0, inplace=True)
df_u_t_s['Promo2SinceYear'].fillna(0, inplace=True)
df_u_t_s['Promo2'].fillna(0, inplace=True)

#convertir a entero
df_u_t_s['CompetitionOpenSinceMonth'] = df['CompetitionOpenSinceMonth'].astype(int)
df_u_t_s['CompetitionOpenSinceYear'] =df['CompetitionOpenSinceYear'].astype(int)
df_u_t_s['Promo2SinceWeek'] = df['Promo2SinceWeek'].astype(int)
df_u_t_s['Promo2SinceYear'] = df['Promo2SinceYear'].astype(int)
df_u_t_s['Promo2'] =df['Promo2'].astype(int)
df_u_t_s['CompetitionDistance'] =df['CompetitionDistance'].astype(int)

#eliminar columnas irelevantes
df_u_t_s =df_u_t_s.drop(['Date'], axis=1)
df_u_t_s =df_u_t_s.drop(['StoreType'], axis=1)
df_u_t_s =df_u_t_s.drop(['PromoInterval'], axis=1)
df_u_t_s =df_u_t_s.drop(['Assortment'], axis=1)
df_u_t_s.head()

df_u_t_s.info()

# Definir X (variables independientes) y Y (variable dependiente)
X_train = df[['Store', 'DayOfWeek', 'Open', 'Promo', 'StateHoliday',
         'CompetitionDistance', 'CompetitionOpenSinceMonth', 'CompetitionOpenSinceYear',
         'Promo2SinceWeek','Promo2SinceYear']]
y_train = df['Sales']  # Variable objetivo en df

# Dividir los datos en conjunto de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crear y entrenar el modelo de regresión lineal
model = LinearRegression()
model.fit(X_train, y_train)

# Hacer predicciones en el conjunto de prueba
y_pred = model.predict(X_test)

# Evaluar el modelo
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Error cuadrático medio (MSE): {mse}')
print(f'Coeficiente de determinación (R^2): {r2}')

# Mean squared error (MSE )
print (f'MSE: {mean_squared_error(y_train, Y_pred_train)}')

# RMSE
print (f'RMSE: {np.sqrt(mean_squared_error(y_train, Y_pred_train))}')

# MAE
print (f'MAE: {mean_absolute_error(y_train, Y_pred_train)}')

# R2
print (f'R2: {r2_score(y_train, Y_pred_train)}')

# Obtener los coeficientes del modelo
coefficients = model.coef_
feature_names = X.columns
print(coefficients)
print(feature_names)

#Interpretar los resultados:
print('Coeficientes:', modelo_lineal.coef_)
print('Intercepto:', modelo_lineal.intercept_)

# Crear un DataFrame para mostrar los coeficientes
impact_df = pd.DataFrame({'Feature': feature_names, 'Coefficient': coefficients})
print(impact_df)

# Filtrar por CompetitionDistance
competition_impact = impact_df[impact_df['Feature'] == 'CompetitionDistance']

# Resultados
print("Mean Squared Error:", mse)
print("R^2 Score:", r2)
print("Impacto de la competencia:")
print(competition_impact)

# Definir las variables independientes para el conjunto de prueba (df_u_t_s no tiene 'Sales')
X_test = df_u_t_s[['Store', 'DayOfWeek', 'Open', 'Promo', 'StateHoliday', 'SchoolHoliday',
                   'CompetitionDistance', 'CompetitionOpenSinceMonth', 'CompetitionOpenSinceYear',
                   'Promo2SinceWeek', 'Promo2SinceYear']]

# Hacer predicciones en el conjunto de prueba
y_test_pred = model.predict(X_test)

# Mostrar las predicciones
df_u_t_s['PredictedSales'] = y_test_pred
print(df_u_t_s['PredictedSales'])

# Mostrar las primeras filas con las predicciones
df_u_t_s.head(5)

'''
Coeficientes:
CompetitionDistance(Impacto de la Competencia:): -0.0185 El coeficiente al estar negativo, indica que a medida que la distancia hacia la competencia aumenta, las ventas tienden a disminuir ligeramente. Sin embargo, el impacto es bastante pequeño, la competencia tiene poco efecto sobre las ventas de la tienda, al menos en lo que respecta a la distancia. Por cada unidad que aumente la distancia a la competencia, las ventas disminuyen en 0.0185 unidades, manteniendo todo lo demás constante.
Otros Coeficientes Importantes:
Promo: 2417.645: Las promociones tienen un impacto positivo importante en las ventas. Cada vez que hay una promoción, las ventas aumentan en promedio 2417 unidades.
StateHoliday: -1002.788: Los días festivos estatales tienden a reducir las ventas en promedio 1002 unidades, lo que da a enterder que interes de compra en estos días disminuye reflejando un menor tráfico en la tienda.

Métricas del Modelo:
Mean Squared Error (MSE): 7551209.55, el MSE es relativamente alto, indicando que hay una cantidad considerable de error en las predicciones del modelo.
R² Score: 0.4872, indica que el modelo explica aproximadamente el 48.7% de la variabilidad en las ventas. Aunque no es un valor muy alto, significa que el modelo está capturando una parte de la relación entre las características y las ventas.
lo anterior indican que este modelo no es el más optimo.

Impacto de la Competencia:
Esto podría significar que la competencia tiene poco efecto sobre las ventas de una tienda, al menos en lo que respecta a la distancia.