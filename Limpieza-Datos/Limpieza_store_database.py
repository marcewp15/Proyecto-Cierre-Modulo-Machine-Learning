# -*- coding: utf-8 -*-
"""store_df.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15MaU2NbmRTNJVsbS29DgNtNv8L-Dtoi5
"""

#importar bibliotecas
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#importar data_set
store_df = pd.read_csv("/content/store.csv")

store_df.info()

"""# **Exploracion inicial**"""

#Exploracion inicial
#Filtrar por promociones
store_df[store_df['Promo2'] == 0]

#Ver valores nulos en fechas de competencia
store_df[store_df['CompetitionOpenSinceMonth'].isnull()]

"""#Apuntes
De este filtro podemos ver que hay  354 registros done marca distancia de la competencia pero sin datos de cuando abrio la competencia, inferimos que ambas tiendas abrieron al mismo tiempo.
abria que igualar 0 esos registros para que se pueden hacer los futuros analisis

# **Conocer que tipos de datos hay en la base de datos**
"""

#Mostrar informacion general del conjunto de datos
store_df.info()

"""# Apuntes

1. las fechas hay que cambiarlas a formato fecha a uno mas conveniente para el futuro tratamiento en los modelos

# **Conteo de los niveles en las diferentes columnas categórica**s
"""

# Conteo de los niveles en las diferentes columnas categóricas
cols_cat = ['StoreType','Assortment', 'Promo2', 'PromoInterval']

for col in cols_cat:
  print(f'Columna {col}: {store_df[col].nunique()} subniveles')

"""#Apuntes
 No hay anamalias en los subniveles del dataset store, en las columnas categoricas
"""

#Mostrar las ultimas filas del conjunto de datos
store_df.tail()

"""# **Graficar las columnas categoricas**"""

#Graficar las columnas categoricas
fig, ax = plt.subplots(nrows=4, ncols=1, figsize=(10,30))
fig.subplots_adjust(hspace=1)

for i, col in enumerate(cols_cat):
  sns.countplot(x=col, data=store_df, ax=ax[i])
  ax[i].set_title(col)
  ax[i].set_xticklabels(ax[i].get_xticklabels(),rotation=30)

#Eliminar filas duplicadas del conjunto de datos
print(f'Tamaño del set antes de eliminar las filas repetidas: {store_df.shape}')
store_df.drop_duplicates(inplace=True)                                          #No hay valores duplicados.
print(f'Tamaño del set después de eliminar las filas repetidas: {store_df.shape}')

"""#Apuntes
Igualar a cero las columnas con valores nulos. CompetiotionSinceMonth, ConmpetitionOpenSinceYear, PromoInterval, Promo2SinceWeek, Promo2SinceYear.
"""

# Rellenar los valores nulos con 0
"""store_df['CompetitionOpenSinceMonth'].fillna(0, inplace=True)
store_df['CompetitionOpenSinceYear'].fillna(0, inplace=True)
store_df['PromoInterval'].fillna(0, inplace=True)
store_df['Promo2SinceWeek'].fillna(0, inplace=True)
store_df['Promo2SinceYear'].fillna(0, inplace=True)"""
store_df.tail()
#Buscar valores atipicos, por las variables numericas.

#Con este codigo nos dimos cuenta que hay 3 valores nulos.
store_df[store_df['CompetitionDistance'].isnull()]

"""# **Rellenar con la media los valores nulos, para la columna, CompetitionDistance**"""

#Rellenar los valores nulos en la columna 'CompetitionDistance' con la media
store_df['CompetitionDistance'].fillna(store_df['CompetitionDistance'].mean(), inplace=True)
store_df.info()

"""# **Encontrar los valores extremos en las variables numericas**"""

#Creamos diagramas para las variables numericas
column_num = ["Store", "CompetitionDistance", "CompetitionOpenSinceMonth", "CompetitionOpenSinceYear", "Promo2", "Promo2SinceWeek", "Promo2SinceYear"]

fig, ax = plt.subplots(nrows=7, ncols=1, figsize=(8,30))
fig.subplots_adjust(hspace=0.5)

for i, column in enumerate(column_num):
  sns.boxplot(x=column, data=store_df, ax=ax[i])
  ax[i].set_title(column)

"""Hallazgos:
Hay valores que pueden ser errores de digitacion como los años de apertura de dos tiendas de 1900 y 1961, debido a que no tenemos claridad acerca de las fechas cuando empezaron las tiendas, procedemos a borrar estos datos por lo muchos que se alejan de la concentracion de datos.


"""

#procedemos a elimiar los valores con fecha de 1900 y 1960
print(f'Tamaño del set después de eliminar registros de sinceyear: {store_df.shape}')
store_df = store_df[(store_df['CompetitionOpenSinceYear'] != 1900) & (store_df['CompetitionOpenSinceYear'] != 1961)]
print(f'Tamaño del set después de eliminar registros de sinceyear: {store_df.shape}')

#Guardar el conjunto de datos modificado en un archivo CSV
store_df.to_csv('store_data_modified.csv', index=False)

#Descargar el Archivo
from google.colab import files
files.download('store_data_modified.csv')