# -*- coding: utf-8 -*-
"""Base_Datos_Train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EbUDL-P50mPepFRhb-Xaa7-106jHq81V
"""

from google.colab import drive
drive.mount('/content/drive')

"""***LIBRERÍAS***"""

#Importar librerias
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""***BASE DE DATOS***"""

#subir bases de datos
df_train = pd.read_csv('/content/drive/MyDrive/BASE_DATOS_TRAIN_MOD_N°_3/Base_train.csv')
#df_train.head()
df_train.info()

"""***PREPROCESAMIENTO Y LIMPIEZA***"""

# Modificación del formato de la variable "Date" como corresponde
df_train['Date']= pd.to_datetime(df_train['Date'], format='%m/%d/%Y') # DataFrame "Sales"
df_train['Date'] = pd.to_datetime(df_train['Date'])

#df_train.isnull().sum()
#df_train.duplicated().sum()
df_train.head()

# Contar los valores 1 en la columna 'open'
count_promo_1 = df_train['Promo'].sum()

print(f'Número de veces que el valor 1 aparece en la columna open: {count_promo_1}')

"""***ANÁLISIS ESTADÍSTICO***"""

# Explorar la distribución de ventas

# 1. Histograma para la variable Ventas (Sales)
plt.figure(figsize=(10, 6))
sns.histplot(df_train['Sales'], bins=30, kde=True, color='blue')
plt.title('Distribución de Ventas')
plt.xlabel('Ventas')
plt.ylabel('Frecuencia')
plt.show()



# 3. Boxplot para comparar las ventas entre días de la semana
plt.figure(figsize=(10, 6))
sns.boxplot(x='DayOfWeek', y='Sales', data=df_train)
plt.title('Ventas por Día de la Semana')
plt.xlabel('Día de la Semana')
plt.ylabel('Ventas')
plt.show()

# 4. Scatter plot para ver la relación entre Ventas y Clientes
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Customers', y='Sales', data=df_train, color='red')
plt.title('Relación entre Ventas y Clientes')
plt.xlabel('Clientes')
plt.ylabel('Ventas')
plt.show()

# Graficamos las ventas del día 7 (Domingo) por mes para el año 2013
# Extraemos el mes y el año de la columna 'Date'
df_train['Month'] = df_train['Date'].dt.month
df_train['Year'] = df_train['Date'].dt.year

# Filtramos los datos para el DayOfWeek = 7 (Domingo) y el año 2013
df_day7_2013 = df_train[(df_train['DayOfWeek'] == 7) & (df_train['Year'] == 2013)]

# Graficamos las ventas del día 7 (Domingo) por mes para el año 2013
plt.figure(figsize=(10, 6))
sns.barplot(x='Month', y='Sales', data=df_day7_2013, estimator=sum, ci=None, palette='Blues_d')

# Añadimos títulos y etiquetas
plt.title('Ventas Totales en el Día 7 (Domingo) por Mes - Año 2013')
plt.xlabel('Mes')
plt.ylabel('Ventas Totales')
plt.show()

# 5. Relación entre ventas y promociones
plt.figure(figsize=(12, 6))
sns.boxplot(x='Promo', y='Sales', data=df_train)
plt.title('Ventas durante promociones vs sin promociones')
plt.xlabel('Promoción')
plt.ylabel('Ventas')
plt.show()

# 6. Gráfico de barras para total de ventas por día de la semana
plt.figure(figsize=(8, 6))
sns.barplot(x='DayOfWeek', y='Sales', data=df_train, estimator=sum, ci=None, palette='coolwarm')

# Añadimos títulos y etiquetas
plt.title('Total de Ventas por Día de la Semana')
plt.xlabel('Día de la Semana')
plt.ylabel('Ventas Totales')
plt.show()


# 7. Gráfico de torta para mostrar la proporción de días con tienda abierta vs cerrada
open_counts = df_train['Open'].value_counts()

plt.figure(figsize=(6, 6))
plt.pie(open_counts, labels=['Abierta', 'Cerrada'], autopct='%1.1f%%', startangle=90, colors=['lightgreen', 'lightcoral'])
plt.title('Proporción de Días con Tienda Abierta vs Cerrada')
plt.show()

# Graficamos la evolución de las ventas a lo largo del tiempo
plt.figure(figsize=(12, 6))
sns.lineplot(x='Date', y='Sales', data=df_train, color='blue')

# Añadimos títulos y etiquetas
plt.title('Evolución de las Ventas a lo largo del Tiempo')
plt.xlabel('Fecha')
plt.ylabel('Ventas')
plt.xticks(rotation=45)
plt.show()

# Graficamos la evolución del número de clientes a lo largo del tiempo
plt.figure(figsize=(12, 6))
sns.lineplot(x='Date', y='Customers', data=df_train, color='green')

# Añadimos títulos y etiquetas
plt.title('Evolución del Número de Clientes a lo largo del Tiempo')
plt.xlabel('Fecha')
plt.ylabel('Clientes')
plt.xticks(rotation=45)
plt.show()

# Extraemos día de la semana y mes de la columna Date
df_train['DayOfWeek'] = df_train['Date'].dt.dayofweek  # 0 = Lunes, 6 = Domingo
df_train['Month'] = df_train['Date'].dt.month

# Creamos una tabla pivote para el heatmap de ventas por tienda y día de la semana
sales_pivot = df_train.pivot_table(values='Sales', index='Store', columns='DayOfWeek', aggfunc='sum')

# Graficamos el heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(sales_pivot, cmap='YlGnBu', annot=False)

# Añadimos títulos y etiquetas
plt.title('Heatmap de Ventas por Tienda y Día de la Semana')
plt.xlabel('Día de la Semana (0 = Lunes, 6 = Domingo)')
plt.ylabel('Tienda')
plt.show()

print(f'tamaño del set antes de eliminar las filas repetidas: {df.shape}')
df.drop_duplicates(inplace=True)
# si df.shape se utiliza para obtener las dimensiones, devuelve (100.5) significa que el data frame tiene 100 filas y 5 columnas
print(f'tamaño del set despues de eliminar las filas repetidas: {df.shape}')

df.nunique()